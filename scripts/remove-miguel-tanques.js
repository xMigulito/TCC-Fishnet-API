const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function removeMiguelTanques() {
  try {
    console.log('üîç Removendo associa√ß√µes de tanques do usu√°rio Miguel...');

    // Buscar o usu√°rio Miguel
    const miguel = await prisma.usuarioSIS.findFirst({
      where: { Usuario: 'miguel' }
    });

    if (!miguel) {
      console.log('‚ùå Usu√°rio Miguel n√£o encontrado!');
      return;
    }

    console.log(`üë§ Usu√°rio Miguel encontrado (ID: ${miguel.id})`);

    // Remover todas as associa√ß√µes de tanques do Miguel
    const deletedAssociations = await prisma.tanqueUser.deleteMany({
      where: { Usuario_Sis_Id: miguel.id }
    });

    console.log(`‚úÖ Removidas ${deletedAssociations.count} associa√ß√µes de tanques do Miguel`);

    // Verificar se ainda h√° associa√ß√µes
    const remainingAssociations = await prisma.tanqueUser.findMany({
      where: { Usuario_Sis_Id: miguel.id }
    });

    if (remainingAssociations.length === 0) {
      console.log('‚úÖ Miguel agora n√£o tem associa√ß√£o com nenhum tanque');
    } else {
      console.log(`‚ö†Ô∏è  Ainda restam ${remainingAssociations.length} associa√ß√µes`);
    }

    console.log('\nüéâ Usu√°rio Miguel configurado sem tanques!');
    console.log('\nüìß Credenciais:');
    console.log('   Email: miguel@fishnet.com');
    console.log('   Senha: 123456');
    console.log('   Tanques: Nenhum');

  } catch (error) {
    console.error('‚ùå Erro ao remover associa√ß√µes:', error);
  } finally {
    await prisma.$disconnect();
  }
}

removeMiguelTanques();
